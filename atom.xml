<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[ZhouQi's Blog]]></title>
  <link href="http://bitwolaiye.github.io/atom.xml" rel="self"/>
  <link href="http://bitwolaiye.github.io/"/>
  <updated>2013-12-01T17:29:27+08:00</updated>
  <id>http://bitwolaiye.github.io/</id>
  <author>
    <name><![CDATA[周琪(zhouqi)]]></name>
    <email><![CDATA[bitwolaiye@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[新python项目--1.准备工作]]></title>
    <link href="http://bitwolaiye.github.io/blog/2013/11/24/new-python-project-1-prepare/"/>
    <updated>2013-11-24T18:13:09+08:00</updated>
    <id>http://bitwolaiye.github.io/blog/2013/11/24/new-python-project-1-prepare</id>
    <content type="html"><![CDATA[<h2>一、准备python环境</h2>

<p>我的工作机是Mac.而目标服务器应该大都是Ubuntu或者centOS，这2者我更倾向于Ubuntu，所以我将把Mac和Ubuntu下的步骤记录下来。</p>

<h3>1.1 包管理</h3>

<p>Mac下我用的包管理是brew，Ubuntu自带的包管理是apt-get。</p>

<p>pip是python下的包管理，pip如何装请自行google或者bing？</p>

<h3>1.2 virtualenv</h3>

<p>为什么需要virtualenv？</p>

<p>其实之前我一直没有用，但这次可能要用的一些类库的版本可能和现在已有的项目不大一样，所以试试吧。</p>

<p>安装virtualenv及创建一个虚拟环境命令如下：（pyCharm似乎自带这个功能，我没用过，同时需要在pyCharm中简单配置下才可以支持虚拟环境）</p>

<pre><code>$ sudo pip install virtualenv virtualenvwrapper
$ export WORKON_HOME=~/work/python_project
$ mkdir -p $WORKON_HOME
$ source /usr/local/bin/virtualenvwrapper.sh
$ mkvirtualenv env1
</code></pre>

<p>需要退出虚拟环境时</p>

<pre><code>$ deactivate
</code></pre>

<p>需要进入虚拟环境时</p>

<pre><code>$ cd ~/work/python_project/env1
$ source bin/activate
</code></pre>

<p>相关参考：</p>

<ul>
<li><a href="https://pypi.python.org/pypi/virtualenv">virtualenv</a></li>
<li><a href="http://virtualenvwrapper.readthedocs.org/en/latest/">virtualenvwrapper</a>是一个对虚拟环境的一个包装工具。</li>
</ul>


<h3>1.3 django</h3>

<p>之前我用的是django1.3后来升级到1.4，新装的环境一看已经是1.6了，所以这个项目将在django1.6的基础上继续</p>

<pre><code>$ pip install django
</code></pre>

<h3>1.4 djangorestframework</h3>

<p>djangorestframework是我找到的一个在django的基础上提供restful api的框架。版本2.3.9。</p>

<pre><code>$ pip install djangorestframework
</code></pre>

<h3>1.5 MySQLdb</h3>

<p>db是MySQL，python下需要安装MySQLdb。</p>

<p>Ubuntu：</p>

<pre><code>$ sudo apt-get install python-MySQLdb
</code></pre>

<p>Mac:</p>

<p>mac下的安装似乎有点问题，简单的pip是装不了的，给个参考按<a href="http://blog.csdn.net/intel80586/article/details/8487682">mac os x 10.8 安装python-mysqldb血泪史</a> 的步骤做就可以了。我装的是MySQL-python-1.2.4b4，其实也不算太麻烦，就是下的源码包，然后修改下配置文件</p>

<pre><code>mysql_config = /usr/local/mysql/bin/mysql_config
</code></pre>

<p>就可以了，验证是否安装ok，在python下</p>

<pre><code>&gt;&gt;&gt; import MySQLdb
</code></pre>

<p>没异常就是ok了。</p>

<h2>二、数据库</h2>

<p>数据库选择MySQL，此处不再详述安装等过程。关键是这块环境我是已有的，懒得再捣腾，你懂的。</p>

<h2>三、版本库</h2>

<p>我在github上建立了一个开源项目<a href="https://github.com/bitwolaiye/django_rest_api_sample">django_rest_api_sample</a> 用于存储代码。</p>

<p>将项目clone到本地</p>

<pre><code>$ cd env1
$ git clone https://github.com/bitwolaiye/django_rest_api_sample.git
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[新的python项目]]></title>
    <link href="http://bitwolaiye.github.io/blog/2013/11/24/new-python-project/"/>
    <updated>2013-11-24T18:12:48+08:00</updated>
    <id>http://bitwolaiye.github.io/blog/2013/11/24/new-python-project</id>
    <content type="html"><![CDATA[<h2>一、想法</h2>

<p>起因是因为要对之前的一部分学习进行总结，可是我对python这块只是简单应用，而非大拿，所以当要自己写点有深度的内容，发现还是相当的乏力。不过回想过去的很长一段时间还是遇到了很多问题同时也解决了问题，把这些问题总结下，也是个收获，还能分享给别人。所以我想就以之前的项目为原型，一步一步把再做一遍，同时回忆回忆问题，再总结总结分享下。</p>

<p>这个项目暂定以宠物社区为目标，搭建面向移动平台、提供后台api的服务。</p>

<p>在这个项目里，用户可以发布带一张图或一段短文本的信息。用户之间可以相互关注，关注后，可以看到被关注者发布的信息。用户可以对信息发表评论，评论后将会给被评论者发送通知。</p>

<p>项目名:pet_api</p>

<h2>二、计划章节</h2>

<br/>


<ol>
<li>准备工作</li>
<li>框架搭建</li>
<li>基本功能实现</li>
<li>部署</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello Github!]]></title>
    <link href="http://bitwolaiye.github.io/blog/2013/11/24/hello-github/"/>
    <updated>2013-11-24T14:59:24+08:00</updated>
    <id>http://bitwolaiye.github.io/blog/2013/11/24/hello-github</id>
    <content type="html"><![CDATA[<p>我很早之前就看过了github的page的功能，并且尝试搭了下，但是一直也没有坚持写下去。这次有点想法，于是参照了破船和唐巧写的内容，重新搭一次。后续我准备在这个平台正式的写点技术总结，不同于我在另一个平台上的流水，这边应该是一些对别人也有些用的内容，同时也是对自己的总结。
这篇是一个开头，同时我也将在这片里面持续的记录利用github page搭建博客的过程以及遇到的问题。</p>

<h2>一、搭建</h2>

<p>大部分都参照于
<a href="http://beyondvincent.com/blog/2013/08/03/108-creating-a-github-blog-using-octopress/">利用Octopress搭建一个Github博客 from 破船之家</a>
而完成，同时辅助参考
<a href="http://blog.devtang.com/blog/2012/02/10/setup-blog-based-on-github/">象写程序一样写博客：搭建基于github的博客 from 唐巧</a></p>

<p>模板我用的不是默认的，而是和破船之家一样的 <a href="https://github.com/shashankmehta/greyshade">greyshade</a></p>

<p>评论我用了多说。可以选择的还有有言。</p>

<p>后续的内容还需要继续摸索，慢慢更新。</p>

<h2>二、心得</h2>

<br/>


<h3>2.1 fabric</h3>

<p>我习惯用python的fabric来替代一些需要记忆的脚本，比如在这里我记不住发布的命令，于是每次翻别人blog太麻烦，于是我就用fabric。</p>

<p>安装fabric</p>

<pre><code>$ pip install fabric
</code></pre>

<p>在当前目录创建fab.py</p>

<pre><code>from fabric.api import local
def deploy(msg=''):
    local('rake generate')
    local('git add .')
    local('git commit -am "%s"' % msg)
    local('git push origin source')
    local('rake deploy')
</code></pre>

<p>保存退出</p>

<p>然后我需要发布时只需要输入</p>

<pre><code>$ fab deploy:msg='these message is commit to github'
</code></pre>

<p>即可</p>
]]></content>
  </entry>
  
</feed>
