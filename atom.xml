<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[ZhouQi's Blog]]></title>
  <link href="http://bitwolaiye.github.io/atom.xml" rel="self"/>
  <link href="http://bitwolaiye.github.io/"/>
  <updated>2013-12-04T10:27:03+08:00</updated>
  <id>http://bitwolaiye.github.io/</id>
  <author>
    <name><![CDATA[周琪(zhouqi)]]></name>
    <email><![CDATA[bitwolaiye@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[关于CSRF]]></title>
    <link href="http://bitwolaiye.github.io/blog/2013/12/04/about-csrf/"/>
    <updated>2013-12-04T00:10:30+08:00</updated>
    <id>http://bitwolaiye.github.io/blog/2013/12/04/about-csrf</id>
    <content type="html"><![CDATA[<h2>什么是csrf</h2>

<br/>


<p><a href="http://baike.baidu.com/view/1609487.htm">CSRF from 百度百科</a></p>

<p>CSRF（Cross-site request forgery跨站请求伪造，也被称为“one click attack”或者session riding，通常缩写为CSRF或者XSRF，是一种对网站的恶意利用。尽管听起来像跨站脚本（XSS），但它与XSS非常不同，并且攻击方式几乎相左。XSS利用站点内的信任用户，而CSRF则通过伪装来自受信任用户的请求来利用受信任的网站。与XSS攻击相比，CSRF攻击往往不大流行（因此对其进行防范的资源也相当稀少）和难以防范，所以被认为比XSS更具危险性。</p>

<p>其实是2个原因导致了风险的出现：</p>

<ol>
<li>为了提高用户的体验，很多网站会在用户的本地存放用户的标示，一般是在浏览器的cookie里存放。这样用户第一次登录过网站后就不用再次登录，甚至在关机后再次打开就可以与后台发起交易，不需要再次验证身份。有人问，如果我的电脑不给人使用就我自己使用，那么是不是在享受方便之余并不损失安全性呢？那么请看2.</li>
<li>我们可以称第一步的网站为网站A。那么如果你访问了恶意网站B，而网站B里插入了一段直接post到网站A的form(或带有了一个直接请求网站A的url)，此时你如果不小心点到了，那么浏览器会去执行表单，同时如果浏览器执行表单的时候会带上你之前留下的cookie，于是灾难发生了。还有人说，如果我少去上xx网站是否就安全了，其实还不是，因为比如以前的论坛等网站可能可以贴js代码，或者带url请求的图片等，那个时候你可能还是可能中招。</li>
</ol>


<p>作为程序员，我们怎么让自己的应用免受csrf攻击呢？</p>

<ol>
<li>去掉cookie自动登录，不让用户方便！ok，这个会被骂的，pass。</li>
<li>对请求增加一个随机数，这个随机数是第三方不能轻易伪造的。<a href="http://www.cnblogs.com/hyddd/archive/2009/04/09/1432744.html">浅谈CSRF攻击方式</a> 在这里面提供了3种方式，都是个思路。其实我认为靠谱的还是第一种，django也是这种方式。下面来看django来如何抵御csrf攻击。</li>
</ol>


<h2>django怎么抵御csrf攻击</h2>

<br/>


<p><a href="https://docs.djangoproject.com/en/dev/ref/contrib/csrf">原文</a></p>

<h3>1. 应用自身做到get请求是无副作用的(side-effect free)</h3>

<p>什么是无副作用呢？</p>

<p>我理解是就算是可以请求到结果，也不会带来损失。最基本的也就是不会修改用户的数据。一般遵循http的语义的都会做到这点。如果一些敏感数据不能让人查询到的应该也最好不用get请求来做，举个例子就是对应银行网站，查询用户的基本信息包括余额、交易记录等应该都属于机密信息，那么django去做银行应用的时候，大部分请求都不能是get请求。</p>

<p>嗯，你懂了？也就是django不保护get请求抵御csrf攻击。自求多福！</p>

<h3>2. post请求靠增加csrf_token来抵御csrf攻击</h3>

<p>在post请求的表单中，增加一个csrf_token的字段，该字段隐藏并填写上内容(隐藏了就不影响用户体验)。后台服务会验证这个字段，那么第三方的恶意网站因为无法伪造这个隐藏字段的内容，所以也就能够保证安全。</p>

<p>在细节实现上，django并不是把这个隐藏字段存在db，然后每次和db检查，或者是每个请求都随机生成一个内容，同时保存起来验证等等。django是在第一次访问(get请求)的时候在cookie里加入了csrf-token，然后post请求过去时，他就直接检查form表单里的csrf-token是否和cookie里的csrf-token一致的。</p>

<p>所以django的csrf抵御也是依赖于cookie来做到的。那么cookie是否100%安全呢？那就不清楚了。</p>

<h3>3. ajax</h3>

<p>django单独将了一章节说ajax怎么处理，其实主要是因为每次post请求都增加一个csrf-token会有些麻烦，于是他建议你写到header里去。</p>

<h3>django对付csrf是否100%安全？</h3>

<p>99%</p>

<p>为何这么说呢？因为cookie也不是100%安全吧。</p>

<h2>移动应用有无csrf风险？</h2>

<br/>




<!--先说下我个人的经历。我最初是用的django搭建的一个面向移动应用的api，登陆那块我是直接继承并重载了django的auth模块，让其的验证逻辑按照我的逻辑进行的验证。同时因为不足够了解django，所以这个csrf防御就比较神奇的跟着django加入了。最初我还不知道csrf，然后在写调用api的例子时就发现了问题，后来折腾比较久才发现了有个csrftoken的东西必须带上。

当时囫囵吞枣，追求的是赶紧跑起来，很长一段时间都没再关注过什么是csrf，csrf有哪些危害等等问题。距离最初做这个快2年时间了，虽然其间花过时间，看过2次，但是都没个彻底思考。我心里一直有一个疑问，移动应用的api真的需要csrf防御么？-->


<p>我们翻回去再看下第一、二章。</p>

<p>第一个问题：cookie该为csrf负责么？</p>

<p>cookie给用户带来方便的同时也引入了风险。但我不认为cookie要为csrf攻击负责，因为实际上从django的实现可以看到抵御csrf攻击的cookie还是起到了很大的作用。</p>

<p>第二个问题：网站A该为csrf负责么？</p>

<p>是的。因为他做好了防范，那么就没有危害了。</p>

<p>第三个问题：浏览器在该为csrf负责么？</p>

<p>是的。浏览器在csrf攻击中，错误的在访问恶意网站B的时候，允许提交表单至网站A，且同时带上了网站A的cookie，从而使攻击者不需要窃取网站A的cookie，转而利用浏览器“借用”了网站A的cookie。</p>

<p>第四个问题：移动应用是否存在csrf风险？</p>

<p>对比移动应用，移动应用也会为了提高用户体验将很多用户的信息缓存下来，存放的位置一般来说不同于浏览器的cookie，以iOS为例，可能是UserDefauts、SQLite、CoreData，那么这些都是别的应用无法访问的(这个由iOS保证)，所以别的应用无法类似向对待浏览器一样来发起攻击。当然，移动应用也可以在本机的cookie里存放用户信息，那么此时如果本机的浏览器会存在问题3中提到的，那么一样需要考虑csrf攻击。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[新python项目--1.准备工作]]></title>
    <link href="http://bitwolaiye.github.io/blog/2013/11/24/new-python-project-1-prepare/"/>
    <updated>2013-11-24T18:13:09+08:00</updated>
    <id>http://bitwolaiye.github.io/blog/2013/11/24/new-python-project-1-prepare</id>
    <content type="html"><![CDATA[<h2>一、准备python环境</h2>

<p>我的工作机是Mac.而目标服务器应该大都是Ubuntu或者centOS，这2者我更倾向于Ubuntu，所以我将把Mac和Ubuntu下的步骤记录下来。</p>

<h3>1.1 包管理</h3>

<p>Mac下我用的包管理是brew，Ubuntu自带的包管理是apt-get。</p>

<p>pip是python下的包管理，pip如何装请自行google或者bing？</p>

<h3>1.2 virtualenv</h3>

<p>为什么需要virtualenv？</p>

<p>其实之前我一直没有用，但这次可能要用的一些类库的版本可能和现在已有的项目不大一样，所以试试吧。</p>

<p>安装virtualenv及创建一个虚拟环境命令如下：（pyCharm似乎自带这个功能，我没用过，同时需要在pyCharm中简单配置下才可以支持虚拟环境）</p>

<pre><code>$ sudo pip install virtualenv virtualenvwrapper
$ export WORKON_HOME=~/work/python_project
$ mkdir -p $WORKON_HOME
$ source /usr/local/bin/virtualenvwrapper.sh
$ mkvirtualenv env1
</code></pre>

<p>需要退出虚拟环境时</p>

<pre><code>$ deactivate
</code></pre>

<p>需要进入虚拟环境时</p>

<pre><code>$ cd ~/work/python_project/env1
$ source bin/activate
</code></pre>

<p>相关参考：</p>

<ul>
<li><a href="https://pypi.python.org/pypi/virtualenv">virtualenv</a></li>
<li><a href="http://virtualenvwrapper.readthedocs.org/en/latest/">virtualenvwrapper</a>是一个对虚拟环境的一个包装工具。</li>
</ul>


<h3>1.3 django</h3>

<p>之前我用的是django1.3后来升级到1.4，新装的环境一看已经是1.6了，所以这个项目将在django1.6的基础上继续</p>

<pre><code>$ pip install django
</code></pre>

<h3>1.4 djangorestframework</h3>

<p>djangorestframework是我找到的一个在django的基础上提供restful api的框架。版本2.3.9。</p>

<pre><code>$ pip install djangorestframework
</code></pre>

<h3>1.5 MySQLdb</h3>

<p>db是MySQL，python下需要安装MySQLdb。</p>

<p>Ubuntu：</p>

<pre><code>$ sudo apt-get install python-MySQLdb
</code></pre>

<p>Mac:</p>

<p>mac下的安装似乎有点问题，简单的pip是装不了的，给个参考按<a href="http://blog.csdn.net/intel80586/article/details/8487682">mac os x 10.8 安装python-mysqldb血泪史</a> 的步骤做就可以了。我装的是MySQL-python-1.2.4b4，其实也不算太麻烦，就是下的源码包，然后修改下配置文件</p>

<pre><code>mysql_config = /usr/local/mysql/bin/mysql_config
</code></pre>

<p>就可以了，验证是否安装ok，在python下</p>

<pre><code>&gt;&gt;&gt; import MySQLdb
</code></pre>

<p>没异常就是ok了。</p>

<h2>二、数据库</h2>

<p>数据库选择MySQL，此处不再详述安装等过程。关键是这块环境我是已有的，懒得再捣腾，你懂的。</p>

<h2>三、版本库</h2>

<p>我在github上建立了一个开源项目<a href="https://github.com/bitwolaiye/django_rest_api_sample">django_rest_api_sample</a> 用于存储代码。</p>

<p>将项目clone到本地</p>

<pre><code>$ cd env1
$ git clone https://github.com/bitwolaiye/django_rest_api_sample.git
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[新的python项目]]></title>
    <link href="http://bitwolaiye.github.io/blog/2013/11/24/new-python-project/"/>
    <updated>2013-11-24T18:12:48+08:00</updated>
    <id>http://bitwolaiye.github.io/blog/2013/11/24/new-python-project</id>
    <content type="html"><![CDATA[<h2>一、想法</h2>

<p>起因是因为要对之前的一部分学习进行总结，可是我对python这块只是简单应用，而非大拿，所以当要自己写点有深度的内容，发现还是相当的乏力。不过回想过去的很长一段时间还是遇到了很多问题同时也解决了问题，把这些问题总结下，也是个收获，还能分享给别人。所以我想就以之前的项目为原型，一步一步把再做一遍，同时回忆回忆问题，再总结总结分享下。</p>

<p>这个项目暂定以宠物社区为目标，搭建面向移动平台、提供后台api的服务。</p>

<p>在这个项目里，用户可以发布带一张图或一段短文本的信息。用户之间可以相互关注，关注后，可以看到被关注者发布的信息。用户可以对信息发表评论，评论后将会给被评论者发送通知。</p>

<p>项目名:pet_api</p>

<h2>二、计划章节</h2>

<br/>


<ol>
<li>准备工作</li>
<li>框架搭建</li>
<li>基本功能实现</li>
<li>部署</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello Github!]]></title>
    <link href="http://bitwolaiye.github.io/blog/2013/11/24/hello-github/"/>
    <updated>2013-11-24T14:59:24+08:00</updated>
    <id>http://bitwolaiye.github.io/blog/2013/11/24/hello-github</id>
    <content type="html"><![CDATA[<p>我很早之前就看过了github的page的功能，并且尝试搭了下，但是一直也没有坚持写下去。这次有点想法，于是参照了破船和唐巧写的内容，重新搭一次。后续我准备在这个平台正式的写点技术总结，不同于我在另一个平台上的流水，这边应该是一些对别人也有些用的内容，同时也是对自己的总结。
这篇是一个开头，同时我也将在这片里面持续的记录利用github page搭建博客的过程以及遇到的问题。</p>

<h2>一、搭建</h2>

<p>大部分都参照于
<a href="http://beyondvincent.com/blog/2013/08/03/108-creating-a-github-blog-using-octopress/">利用Octopress搭建一个Github博客 from 破船之家</a>
而完成，同时辅助参考
<a href="http://blog.devtang.com/blog/2012/02/10/setup-blog-based-on-github/">象写程序一样写博客：搭建基于github的博客 from 唐巧</a></p>

<p>模板我用的不是默认的，而是和破船之家一样的 <a href="https://github.com/shashankmehta/greyshade">greyshade</a></p>

<p>评论我用了多说。可以选择的还有有言。</p>

<p>后续的内容还需要继续摸索，慢慢更新。</p>

<h2>二、心得</h2>

<br/>


<h3>2.1 fabric</h3>

<p>我习惯用python的fabric来替代一些需要记忆的脚本，比如在这里我记不住发布的命令，于是每次翻别人blog太麻烦，于是我就用fabric。</p>

<p>安装fabric</p>

<pre><code>$ pip install fabric
</code></pre>

<p>在当前目录创建fab.py</p>

<pre><code>from fabric.api import local
def deploy(msg=''):
    local('rake generate')
    local('git add .')
    local('git commit -am "%s"' % msg)
    local('git push origin source')
    local('rake deploy')
</code></pre>

<p>保存退出</p>

<p>然后我需要发布时只需要输入</p>

<pre><code>$ fab deploy:msg='these message is commit to github'
</code></pre>

<p>即可</p>
]]></content>
  </entry>
  
</feed>
